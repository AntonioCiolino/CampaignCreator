/* DashboardPage.css */
.dashboard-page {
  /* Using global .container for padding and max-width */
  display: flex; /* Changed to flex for easier vertical stacking of sections */
  flex-direction: column;
  gap: 1rem; /* Consistent gap between page elements */
}

.dashboard-section {
  margin-bottom: 1rem; /* Space below each horizontal section */
  /* background-color: var(--surface-color); */ /* Optional: if sections need distinct background */
  /* padding: 1rem; */ /* Optional: padding for the entire section block */
  /* border-radius: var(--border-radius); */
  /* box-shadow: var(--box-shadow-soft); */
}

.dashboard-section-title {
  font-size: 1.75rem;
  margin-top: 0; /* Reset margin if .dashboard-section has padding */
  margin-bottom: 1rem;
  color: var(--text-color-emphasis, var(--text-color));
  /* border-bottom: 2px solid var(--primary-color); */ /* Optional title underline */
  /* padding-bottom: 0.5rem; */ /* Optional padding for underline */
}

.horizontal-scroll-section {
  display: flex;
  overflow-x: auto;
  /* white-space: nowrap; */ /* Not strictly needed with flex, but doesn't hurt */
  padding-top: 0.5rem; /* Space for card hover effects */
  padding-bottom: 1.5rem; /* Add padding for scrollbar visibility and aesthetics */
  gap: 1rem; /* Space between cards */
  position: relative; /* Needed for pseudo-elements if used for indicators */
}

.horizontal-scroll-section::before,
.horizontal-scroll-section::after {
  content: '';
  position: absolute;
  top: 0;
  bottom: 0; /* Adjust if scrollbar padding makes it look off (e.g., if scrollbar creates space) */
  width: 75px; /* Increased width of the fade */
  pointer-events: none; /* So it doesn't interfere with scrolling */
  z-index: 2; /* Ensure it's above the content */
}

.horizontal-scroll-section::before {
  left: 0;
  background: linear-gradient(to right, var(--surface-color, white) 20%, transparent); /* Fade from page background */
  /* Initially hide left gradient; would need JS to show when scrolled */
  /* For CSS-only persistent hint, it would be opacity: 1 like ::after */
  /* Given the feedback, we want a persistent hint. But ::before should only show if actually scrolled.
     This part is hard with pure CSS. For now, to show *potential*, both will be visible.
     A JS solution would toggle opacity based on scrollLeft.
  */
  opacity: 1; /* Made always visible for now as a persistent hint */
}

.horizontal-scroll-section::after {
  right: 0;
  background: linear-gradient(to left, var(--surface-color, white) 20%, transparent); /* Fade to page background */
  opacity: 1; /* Always visible to indicate potential for scrolling */
}


/*
   The [data-scrollable="true"] and .potentially-scrollable selectors were placeholders
   for JS-driven or more complex CSS logic. For a persistent CSS-only hint,
   we make the ::after element visible by default.
*/
/*
.horizontal-scroll-section[data-scrollable="true"]::after {
  opacity: 1;
}
.horizontal-scroll-section.potentially-scrollable::after {
    opacity: 1;
}
*/

/* Hide scrollbar for a cleaner look, but ensure it's still scrollable */
   A pure CSS way is harder to make perfect, but we can try based on overflow.
   However, `overflow: auto` means it might not always be scrollable even if set.
   A simpler CSS approach might be to always show it if overflow-x is auto and assume
   it's likely to scroll. A more robust solution needs JavaScript.

   For a CSS-only attempt, we might rely on the container having focus or hover,
   but this is not ideal for discoverability.

   Let's assume for now the user wants a *persistent* hint if the container *can* scroll.
   The ::after element will be styled, and we'll rely on the `overflow-x: auto` behavior.
   A JS solution would toggle a class that sets opacity to 1.

   Given only CSS, a simple approach is to always show it, and it will only be
   meaningful when scrolling is actually possible. Or, use a more complex CSS setup
   involving checking scrollbar visibility, which is tricky and not universally supported.

   Let's try a subtle, always-visible hint if overflow is possible.
   The opacity transition is for a potential JS enhancement later.
   For now, if we always show it:
*/
.horizontal-scroll-section[data-scrollable="true"]::after { /* Assume JS will add this attribute */
  opacity: 1;
}
/* Fallback for non-JS or simpler CSS: Always show if it might scroll. */
/* This is not ideal as it shows even if there are few items. */
/* A better pure CSS approach is very difficult. */
/* For now, I will add the ::after rule, but making it appear correctly
   without JS dynamically checking scrollWidth vs clientWidth is tough.
   The request implies a visual indicator when scrolling *is* possible.

   Let's set opacity to 1 for now to make it visible if the CSS is applied,
   and acknowledge that JS would be needed for perfect conditional visibility.
*/
.horizontal-scroll-section.potentially-scrollable::after { /* Default to visible if class applied */
    opacity: 1;
    /* This is a placeholder for a class that *could* be added if content *might* scroll.
       Without JS, we can't know for sure from CSS if it *currently* is scrollable.
       Let's assume for this step we just add the gradient and it will be visible.
       If this is too intrusive when not scrollable, it would need JS.
    */
}


/* Hide scrollbar for a cleaner look, but ensure it's still scrollable */
/* For Webkit browsers */
.horizontal-scroll-section::-webkit-scrollbar {
  height: 8px; /* Adjust height of scrollbar */
}
.horizontal-scroll-section::-webkit-scrollbar-thumb {
  background-color: var(--scrollbar-thumb-color, #ccc);
  border-radius: 4px;
}
.horizontal-scroll-section::-webkit-scrollbar-thumb:hover {
  background-color: var(--scrollbar-thumb-hover-color, #aaa);
}
.horizontal-scroll-section::-webkit-scrollbar-track {
  background-color: var(--scrollbar-track-color, #f1f1f1);
  border-radius: 4px;
}
/* For Firefox */
.horizontal-scroll-section {
  scrollbar-width: thin; /* "auto" or "thin" */
  scrollbar-color: var(--scrollbar-thumb-color, #ccc) var(--scrollbar-track-color, #f1f1f1); /* thumb and track color */
}


.horizontal-scroll-section > .scroll-item-wrapper {
  flex: 0 0 auto; /* Prevent flex items from growing or shrinking */
  width: 300px; /* Default card width */
  max-width: 90vw; /* Ensure card is not wider than viewport on very small screens */
  display: flex; /* To allow the card child to take full height */
}

/* Ensure the Card component itself takes full height of the wrapper */
.scroll-item-wrapper > * { /* Targets the direct child, which should be the Card component */
  height: 100%;
  width: 100%; /* Ensure card fills the wrapper */
}


/* Create Campaign Section - existing styles adapted */
.create-campaign-section {
  background-color: var(--surface-color);
  padding: 1.5rem;
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  margin-top: 1rem; /* Space above this section */
}

.create-campaign-section h2 {
  margin-top: 0;
  margin-bottom: 1.25rem;
  color: var(--text-color);
  font-size: 1.5rem;
}

.create-campaign-form .create-button {
  background-color: var(--success-color);
  border-color: var(--success-color);
  width: 100%;
}

.create-campaign-form .create-button:hover {
  background-color: #1e7e34;
  border-color: #1e7e34;
}

.create-campaign-form .create-button:disabled {
  background-color: var(--secondary-color);
  border-color: var(--secondary-color);
  opacity: 0.65;
}

.error-message.create-error { 
  margin-bottom: 1rem; 
}

/* Old .campaign-list-section and .campaign-list are no longer primary layout tools */
/* .campaign-list-section h1 styling moved to .dashboard-section-title */
.campaign-list {
  /* This class is still on the <ul> in CampaignCard, but it's inside scroll-item-wrapper */
  /* Most grid/layout styles are removed as horizontal-scroll-section handles it */
  list-style: none;
  padding: 0;
  margin: 0;
  /* display: flex; */ /* The parent .scroll-item-wrapper is now the flex item */
  /* width: 100%; */
}

.section-divider {
  border: 0;
  height: 1px;
  background-color: var(--border-color-muted, var(--border-color, #ccc));
  margin: 1.5rem 0; /* Adjusted margin */
}


/* Responsive adjustments */
@media (min-width: 600px) {
  .create-campaign-form .create-button {
    width: auto;
  }
  .horizontal-scroll-section > .scroll-item-wrapper {
    width: 320px; /* Slightly wider cards on larger screens */
  }
}

@media (min-width: 992px) {
  .horizontal-scroll-section > .scroll-item-wrapper {
    width: 340px; /* Even wider cards on desktop */
  }
  .dashboard-page {
    gap: 1.5rem; /* Adjust gap for larger screens */
  }
}
